model,params,mean_test_explained_variance_score,mean_train_explained_variance_score,mean_test_r2_score,mean_train_r2_score,ranking_test_explained_variance_score,ranking_test_r2_score
LinearRegression,fit_intercept: True,0.41,0.5,0.39,0.5,lowest of its class,lowest of its class
LinearRegression,fit_intercept: False,0.41,0.5,0.39,0.5,-,-
SVR,"kernel: linear, gamma: scale, C: 1",0.4,0.47,0.38,0.47,highest of its class,highest of its class
SVR,"kernel: rbf, gamma: scale, C: 1",0.29,0.55,0.25,0.54,-,-
SVR,"kernel: rbf, gamma: scale, C: 10",0.28,0.87,0.22,0.87,-,-
SVR,"kernel: rbf, gamma: auto, C: 20",0.27,0.86,0.21,0.86,-,-
SVR,"kernel: rbf, gamma: auto, C: 10",0.34,0.81,0.29,0.81,-,-
SVR,"kernel: rbf, gamma: scale, C: 20",0.2,0.93,0.11,0.93,lowest of its class,lowest of its class
SVR,"kernel: rbf, gamma: auto, C: 1",0.32,0.51,0.28,0.49,-,-
SVR,"kernel: linear, gamma: scale, C: 10",0.4,0.48,0.38,0.47,-,-
SVR,"kernel: linear, gamma: auto, C: 10",0.4,0.48,0.38,0.47,-,-
SVR,"kernel: linear, gamma: auto, C: 1",0.4,0.47,0.38,0.47,-,-
DecisionTreeRegressor,"splitter: best, min_impurity_decrease: 0.1, max_depth: 1000, criterion: absolute_error",0.17,0.19,0.14,0.17,highest of its class,highest of its class
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.5, max_depth: 100, criterion: poisson",0.0,0.0,-0.02,0.0,-,-
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.9, max_depth: 500, criterion: absolute_error",0.0,0.0,-0.03,-0.01,-,-
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.5, max_depth: 1000, criterion: poisson",0.0,0.0,-0.02,0.0,-,-
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.5, max_depth: 500, criterion: squared_error",0.04,0.04,0.02,0.04,-,-
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.1, max_depth: 100, criterion: squared_error",0.12,0.21,0.11,0.21,-,-
DecisionTreeRegressor,"splitter: best, min_impurity_decrease: 0.5, max_depth: 1000, criterion: poisson",0.0,0.0,-0.02,0.0,-,-
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.9, max_depth: 500, criterion: squared_error",0.0,0.0,-0.02,0.0,-,-
DecisionTreeRegressor,"splitter: best, min_impurity_decrease: 0.9, max_depth: 1000, criterion: friedman_mse",-0.11,0.96,-0.17,0.96,lowest of its class,lowest of its class
DecisionTreeRegressor,"splitter: random, min_impurity_decrease: 0.5, max_depth: 100, criterion: squared_error",0.04,0.04,0.02,0.04,-,-
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 200, criterion: absolute_error",0.37,0.9,0.35,0.9,highest of its class,highest of its class
RandomForestRegressor,"n_estimators: 100, max_features: auto, max_depth: 200, criterion: poisson",0.19,0.89,0.15,0.89,lowest of its class,lowest of its class
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 100, criterion: absolute_error",0.37,0.9,0.35,0.9,-,-
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 100, criterion: squared_error",0.37,0.91,0.35,0.91,-,-
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 200, criterion: squared_error",0.37,0.91,0.35,0.91,-,-
RandomForestRegressor,"n_estimators: 100, max_features: auto, max_depth: 50, criterion: squared_error",0.37,0.91,0.35,0.91,-,-
RandomForestRegressor,"n_estimators: 100, max_features: auto, max_depth: 50, criterion: poisson",0.19,0.89,0.15,0.89,-,-
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 50, criterion: friedman_mse",0.36,0.91,0.34,0.91,-,-
RandomForestRegressor,"n_estimators: 200, max_features: auto, max_depth: 50, criterion: poisson",0.19,0.89,0.15,0.88,-,-
RandomForestRegressor,"n_estimators: 100, max_features: auto, max_depth: 50, criterion: friedman_mse",0.36,0.91,0.34,0.91,-,-
KNeighborsRegressor,"weights: distance, n_neighbors: 50, algorithm: auto",0.21,1.0,0.19,1.0,highest of its class,highest of its class
KNeighborsRegressor,"weights: uniform, n_neighbors: 200, algorithm: auto",0.0,0.0,0.0,0.0,lowest of its class,lowest of its class
KNeighborsRegressor,"weights: uniform, n_neighbors: 100, algorithm: auto",0.04,0.04,0.02,0.04,-,-
KNeighborsRegressor,"weights: uniform, n_neighbors: 200, algorithm: ball_tree",0.0,0.0,0.0,0.0,-,-
KNeighborsRegressor,"weights: uniform, n_neighbors: 50, algorithm: ball_tree",0.14,0.15,0.12,0.15,-,-
KNeighborsRegressor,"weights: uniform, n_neighbors: 100, algorithm: ball_tree",0.04,0.04,0.02,0.04,-,-
KNeighborsRegressor,"weights: distance, n_neighbors: 50, algorithm: ball_tree",0.21,1.0,0.19,1.0,-,-
KNeighborsRegressor,"weights: distance, n_neighbors: 200, algorithm: ball_tree",0.0,0.0,0.0,0.0,-,-
KNeighborsRegressor,"weights: distance, n_neighbors: 100, algorithm: auto",0.12,1.0,0.1,1.0,-,-
KNeighborsRegressor,"weights: uniform, n_neighbors: 50, algorithm: auto",0.14,0.15,0.12,0.15,-,-
AdaBoostRegressor,"n_estimators: 100, loss: linear, learning_rate: 0.9",0.42,0.81,0.39,0.81,-,-
AdaBoostRegressor,"n_estimators: 50, loss: linear, learning_rate: 0.9",0.42,0.8,0.39,0.79,-,-
AdaBoostRegressor,"n_estimators: 200, loss: exponential, learning_rate: 0.1",0.44,0.78,0.42,0.77,highest of its class,highest of its class
AdaBoostRegressor,"n_estimators: 200, loss: square, learning_rate: 0.9",0.38,0.82,0.35,0.81,lowest of its class,lowest of its class
AdaBoostRegressor,"n_estimators: 200, loss: linear, learning_rate: 0.5",0.4,0.81,0.37,0.81,-,-
AdaBoostRegressor,"n_estimators: 100, loss: exponential, learning_rate: 0.1",0.43,0.75,0.41,0.75,-,-
AdaBoostRegressor,"n_estimators: 50, loss: square, learning_rate: 0.9",0.39,0.8,0.35,0.8,-,-
AdaBoostRegressor,"n_estimators: 100, loss: exponential, learning_rate: 0.5",0.39,0.8,0.37,0.79,-,-
AdaBoostRegressor,"n_estimators: 50, loss: square, learning_rate: 0.1",0.39,0.75,0.37,0.75,-,-
AdaBoostRegressor,"n_estimators: 200, loss: exponential, learning_rate: 0.9",0.43,0.82,0.41,0.81,-,-
GaussianProcessRegressor,alpha: 1e-10,-4.87,1.0,-5.32,1.0,lowest of its class,lowest of its class
GaussianProcessRegressor,alpha: 1e-05,-2.91,1.0,-3.23,1.0,-,-
GaussianProcessRegressor,alpha: 0.001,-0.61,1.0,-0.92,1.0,highest of its class,highest of its class
MLPRegressor,"max_iter: 100, hidden_layer_sizes: 50",-0.05,0.03,-2.4,-2.13,-,lowest of its class
MLPRegressor,"max_iter: 200, hidden_layer_sizes: 50",-0.15,0.16,-0.37,-0.0,-,-
MLPRegressor,"max_iter: 300, hidden_layer_sizes: 50",0.02,0.37,-0.03,0.35,-,-
MLPRegressor,"max_iter: 100, hidden_layer_sizes: 100",-0.33,-0.17,-1.17,-0.92,lowest of its class,-
MLPRegressor,"max_iter: 200, hidden_layer_sizes: 100",-0.15,0.21,-0.22,0.18,-,-
MLPRegressor,"max_iter: 300, hidden_layer_sizes: 100",0.06,0.43,0.03,0.42,-,-
MLPRegressor,"max_iter: 100, hidden_layer_sizes: 150",-0.28,-0.06,-0.65,-0.35,-,-
MLPRegressor,"max_iter: 200, hidden_layer_sizes: 150",0.03,0.38,-0.02,0.36,-,-
MLPRegressor,"max_iter: 300, hidden_layer_sizes: 150",0.2,0.55,0.17,0.55,highest of its class,highest of its class
